import { jsPDF } from 'jspdf'
import autoTable from 'jspdf-autotable'

export async function downloadItineraryPDF({ destination, details }) {
    const doc = new jsPDF('p', 'mm', 'a4')

    // Set default font
    doc.setFont('helvetica')

    // Add contact info at the top
    doc.setFontSize(10)
    doc.setTextColor(60, 60, 60)
    doc.text('Contact Us At- +91 8650500202, www.travelchapes.com, contact@travelchapes.com',
        doc.internal.pageSize.getWidth() / 2,
        10,
        { align: 'center' })

    let bannerHeight = 0;
    // Add banner image (full width)
  
        try {
            const imgData = await getImageData('/images/homepage/banner3.webp')
            const pageWidth = doc.internal.pageSize.getWidth() - 20
            const imgHeight = (imgData.height * pageWidth) / imgData.width
            bannerHeight = Math.min(imgHeight, 60)
            const format = destination.banners.web.endsWith('.png') ? 'PNG' : 'JPEG'
            doc.addImage(imgData.src, format, 10, 20, pageWidth, bannerHeight) // Start at y=20 to leave space for contact info
        } catch (e) {
            console.error('Failed to load banner image', e)
        }
 

    // Title section (below banner)
    const startY = destination.banners?.web ? 30 + bannerHeight : 30
    doc.setFontSize(22)
    doc.setTextColor(40, 40, 40)
    doc.text(destination.title, 105, startY, { align: 'center' })

    // Price, Route, Duration with proper formatting
    doc.setFontSize(12)
    doc.setTextColor(80, 80, 80)

    const daysCount = destination.fullItinerary?.length || 0
    const durationText = daysCount ? `${daysCount} Days / ${daysCount - 1} Nights` : ''

    const detailsY = startY + 15
    doc.text(`Route: ${destination.route || 'Not specified'}`, 20, detailsY)
    doc.text(`Duration: ${durationText}`, 20, detailsY + 8)
    doc.text(`Price: Rs ${details?.minPrice} + ${details?.gst || 5}% GST`, 20, detailsY + 16)
    // Fix for rupee symbol - use proper Unicode character
    //   const rupeeSymbol = String.fromCharCode(8377)
    //   doc.text(`Price: ${rupeeSymbol}${details?.minPrice?.toLocaleString('en-IN') || 'NA'} + ${details?.gst || 5}% GST`, 
    //           20, detailsY + 16)

    // Add logo
    try {
        const logoImg = await getImageData('/images/logo.png')
        const logoWidth = 30
        const logoHeight = (logoImg.height * logoWidth) / logoImg.width
        doc.addImage(logoImg.src, 'PNG', 160, detailsY - 5, logoWidth, logoHeight)
    } catch (e) {
        console.error('Failed to load logo image', e)
    }

    // Itinerary Section
    const itineraryY = detailsY + 30
    doc.setFontSize(16)
    doc.setTextColor(40, 40, 40)
    doc.text('Tour Itinerary', 20, itineraryY)

    if (destination.fullItinerary?.length) {
        const rows = destination.fullItinerary.map(item => [
            item.day,
            item.title,
            item.description.replace(/<[^>]+>/g, ' ').replace(/\s+/g, ' ').slice(0, 120) +
            (item.description.length > 120 ? '...' : '')
        ])

        autoTable(doc, {
            head: [['Day', 'Activity', 'Description']],
            body: rows,
            startY: itineraryY + 8,
            margin: { left: 15, right: 15 },
            styles: {
                fontSize: 10,
                cellPadding: 4,
                lineColor: [200, 200, 200],
                lineWidth: 0.3,
                overflow: 'linebreak'
            },
            headStyles: {
                fillColor: [50, 100, 150],
                textColor: [255, 255, 255],
                fontStyle: 'bold'
            },
            columnStyles: {
                0: { cellWidth: 20, fontStyle: 'bold' },
                1: { cellWidth: 40 },
                2: { cellWidth: 'auto' }
            },
            theme: 'grid',
            didDrawPage: (data) => {
                // Footer on each page
                doc.setFontSize(8)
                doc.setTextColor(150)
                doc.text(
                    `Generated by TravelChapes â€¢ ${new Date().toLocaleDateString()}`,
                    doc.internal.pageSize.getWidth() / 2,
                    doc.internal.pageSize.getHeight() - 10,
                    { align: 'center' }
                )
            }
        })
    }

    // Save PDF
    doc.save(`${destination.title.replace(/[^a-z0-9]/gi, '_')}_itinerary.pdf`)
}

// Image loading helper function
async function getImageData(url) {
    console.log('Loading image from:', url)
    const response = await fetch(url)
    const blob = await response.blob()
    return new Promise((resolve) => {
        const reader = new FileReader()
        reader.onload = () => {
            const img = new Image()
            img.onload = () => resolve({
                image: img,
                width: img.width,
                height: img.height,
                src: reader.result
            })
            img.src = reader.result
        }
        reader.readAsDataURL(blob)
    })
}